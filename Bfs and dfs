#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

const int maxn=1000;

vector<int>adj[maxn];
bool visited[maxn];


void dfs(int source){
    visited[source]=true;
    for(int i=0;i<adj[source].size();i++){
        int next=adj[source][i];
        if(visited[next]==false){
            dfs(next);
        }

    }
}

void bfs(int source)

{
    queue<int>q;
    q.push(source);
    visited[source]=true;

    while(!q.empty()){
        int u=q.front();
        q.pop();
        for(int i=0;i<adj[u].size();i++){
            int v=adj[u][i];
            if(visited[v]==true) continue;
            visited[v]=true;
            q.push(v);
        }
    }
}


int main(){
    int nodes,edges;
    cin>>nodes>>edges;

    for(int i = 0; i < edges; i++)
    {
        int u,v;
        cin>>u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
   bfs(0);

    for(int i=0;i<nodes;i++){

      if(visited[i]==true){
            cout<<i<<" is visited"<<endl;
      }
      else{
        cout<<i<<" is not visited"<<endl;
      }
        
    }
    
}
