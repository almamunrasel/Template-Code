#include<bits/stdc++.h>
using namespace std;
typedef long long ll;

const int maxn=10000;

vector<int>parent(maxn,0);

int getParent(int u){

    if(parent[u]=u) return;
    return parent[u]=getParent(parent[u]);



}


 
void union(int u,int v){

    int x=getParent[u];
    int y=getParent[v];
    parent[x]=y;


}

//                                        cost        u     v
int minimumSpanningTree(int n, vector < pair < int, pair < int, int > > > list){

    for(int i=0;i<n;i++){
        parent[i]=i;
    }

   sort(list.begin(),list.end());
   int ans=0;

    for(int i=0;i<len;i++){

        int u=list.second.first;
        int v=list.second.second;
        int c=list.fist;
        if(getParent[u]!=getParent[v]){
            union(u,v);
            ans+=c;

        }
    }

return ans;
}

