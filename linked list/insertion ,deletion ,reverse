#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

struct node
{
    int data;
    node* next;
    node(){
        data=0;
        next=nullptr;
    }
};

node* root=nullptr;

void insertion(int data){
    if(root==nullptr) {
        root=new node();
        root->data=data;
    }
    else{
        node* curnode=root;
        while(curnode->next!=nullptr){
            curnode=curnode->next;
        }
        curnode->next=new node();
        curnode->next->data=data;
    }
}

void print(node* root){

    if(root==nullptr) cout<<"list is empty";
    else{
        node* curnode=root;
        while(curnode->next!=nullptr){
            cout<<curnode->data<<" ";
            curnode=curnode->next;
        }
        cout<<curnode->data<<endl;
    }

}
void listdelete(int data){
    node* temp=root;
    node* prev=nullptr;
    if(temp!=nullptr && temp->data==data){
        root=temp->next;
        free(temp);

    }
    else{
        while(temp!=nullptr && temp->data!=data){
            prev=temp;
            temp=temp->next;
        }
        if(temp==nullptr) cout<<"not found"<<endl;
        prev->next=temp->next;
        free(temp);
    }
}

node* reverselist(node* root){
    node* prev=nullptr;
    node* curn=root;
    node* nex=nullptr;

    while(curn!=nullptr){
        nex=curn->next;

        curn->next=prev;

        prev=curn;
        curn=nex;
    }

    prev= head;
}


int main(){

    int n;
    cin>>n;
    for(int i=0;i<n;i++){
        int x;
        cin>>x;
        insertion(x);
    }
    print(root);
    listdelete(7);
    print(root);
    node* head=reverselist(root);
    print(head);

}
